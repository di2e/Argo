<?xml version="1.0" encoding="UTF-8"?>
<!--
	Notes on service id and contractID:
	
	The id for a service is a unique identifier for this exact instance of the service.
	You will need to generate an id for each service entry.  How you generate the id
	is up to you, but it will need to be globally unique.  It is recommended that you
	use a UUID.  An example id is:  "urn:uuid:3fd78dc8-c83c-4e84-8d01-95423c812ab8"
	
	The contractID is the globally unique id of the service contract.  This is
	equivalent to the id of the "type" of service.  You should already know what this
	ID is and you should not be making it up on the fly.  Argo probes look for services
	of a "type" and will use this contractID number in the probe.  The responder
	simply matches up the probe contractID with the contractID in service entry.
	
	The details of how and when contractIDs are generated should be governed by your
	organization and detailed its Design-time Service Governance protocol.
	
	For Plugfest '15, please refer to Plugfest governanace documentation for how to 
	register a new contractID.
	
	Notes on operational field usage:
	
	The operational fields are: ipAddress, port, url data and ttl.
	The rest of the fields (description, contractDescription, serviceName and
	consumability) are for descriptive purposes and are meant purely for human
	consumption.
	
	ipAddress, port and url are not mandated.  I'd imagine you'd use at least one
	or two of these field to provide the configuation coodinate for the service, but
	the exact usage of the fields is defined by the service contract and not the 
	protocol.  You could forego the usage of all these fields and put the configuration
	information in the data block if you wish.
	
	data usage:  This is uninterperted bytes that will be sent back to the respondTo
	address of the probe.  There is no limitation on what goes in this field.  It could
	be complex configuration information, a picture, some HTML for descriptive purposes.
	Pointers to other stuff.  Whatever.  But I wouldn't make it too big.
	
	TTL usage:  The TTL is an indicator to the requestor that they should only trust
	the configuraiton infomration in the service record for the number of minutes
	specified.  A TTL of 0 is indefinite.  Basically, a client should re-probe after
	the TTL has expired to make sure it has the latest connection informration, but it's
	not required.
	
	consumability usage: This field has 2 options.  HUMAN_CONSUMABLE or MACHINE_CONSUMABLE
	It's just a hint to the consumer regarding what type of service you're advertising.
	MACHINE_CONSUMABLE connotes that the configuraiton information in the service
	record is for some client software to use.  HUMAN_CONSUMABLE connotes that this
	service record is meant to display in a browser for human consumption.  Records
	of this type will likely only have a url set.
	There is no reason why you can't advertise a web site via the protocol.  Try it, 
	you'll like it.
	
-->
<services>
	<service id="YOUR SERVICE ID HERE" contractID="YOUR CONTRACT ID HERE">
		<ipAddress></ipAddress>
		<port></port>
		<url>http://192.168.0.51:8080/MyAwesomeService/index.jsp</url>
		<description>This is an awesome service.  The scope of its awesomeness is hard to describe</description>
		<data><![CDATA[This is some CDATA text]]></data>
		<ttl></ttl>
		<contractDescription>A short description of the contract</contractDescription>
		<serviceName>A very short name for the service instance</serviceName>
		<consumability>HUMAN_CONSUMABLE</consumability>
	</service>
	<service id="YOUR SERVICE ID HERE" contractID="YOUR CONTRACT ID HERE">
		<ipAddress></ipAddress>
		<port></port>
		<url>http://192.168.0.51:8080/AnotherAwesomeService/operation</url>
		<description>This is another awesome service.  The scope of its awesomeness is eclipsed only by the other awesome service</description>
		<data><![CDATA[This is some CDATA text]]></data>
		<ttl>10</ttl>
		<contractDescription>A short description of the contract</contractDescription>
		<serviceName>A very short name for the service instance</serviceName>
		<consumability>MACHINE_CONSUMABLE</consumability>
	</service>
</services>
