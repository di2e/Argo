<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<responder>

  <installDir>@INSTALL_DIR@</installDir>

  <!-- 
  The Responder has a thread pool that is uses to manage the load in inbound probes as they
  get distributed to the probeHandlers.  Each probe gets distributed to each Probe Handler in
  serial for each probe that comes in.  A thread is allocated per probe that comes in over one
  of the transports.
   -->
  <threadPoolSize>10</threadPoolSize>

  <!-- 
  The Responder has the ability to show a status list.  There is no management API for the responder
  at this time.  To see some various stats as to how well the Responder is handling inbound load,
  enable the run monitor to see how the thread pool is working and to see what type of load
  the Responder is handling in messages per second.
   -->
  <runMonitor>false</runMonitor>
  <monitorInterval>5</monitorInterval>

  <probeHandlers>
  
    <!-- 
    The default configuration comes with the ConfigFileProbeHandlerPlugin.  This plugin uses
    a file that contains the list of services that this responder advertises.  This plugin
    also scans for changes to that file while the responder is running, so you can change that
    file, the responder will pick up the changes and then report whatever the new file contents
    provide.  The ConfigFileProbeHandlerPlugin does not read the file each time a probe is handled
    and keeps a memory-resident list of services instead to provide the necessary speed.
     -->
    <probeHandler>
      <classname>ws.argo.responder.plugin.configfile.ConfigFileProbeHandlerPlugin</classname>
      <configFilename>${installDir}/responder/config/configFileProbeHandlerConfig.prop</configFilename>
    </probeHandler>

    <!-- 
    Uncomment to enable Argo to discovery mDNS services as well.
    
    You only really need on one mDNS enables Responder for a local network
    If you enable more than one Argo Responder with this plugin, you'll get redundancy at the price of
    multiple answers for a probe.  This is the trade-off with a multicast-unicast (Argo) protocol and a
    multicast-multicast (mDNS) protocol.  Perhaps we can do some link-local leader election in a later
    release.
    -->
    <!-- <probeHandler>
      <classname>ws.argo.responder.plugin.jmdns.MulticastDNSProbeHandlerPlugin</classname>
      <configFilename></configFilename>
    </probeHandler> -->

  </probeHandlers>
  
  
  <!--   
  The list of Transports provides the glue for the Responder to listen for probes
  over the network.  You can have as many Transports as you like and you can also
  have more than one type each with a difference configuration, providing the Transport 
  class allows for that.
  
  For example, if you want to have 2 Multicast Transports listening, each on a different
  multicast group/port, then just list two <transport> entries with the same classname
  but different configuration files. 
   -->
  <transports>
    <!-- 
    The MulticastTransport is the default.  It should also likely be the transport of
    last resort and all other transports are based on some other centralized pub/sub 
    service.  There is more detail on how to use this transport and when in the documentation.
     -->
    <transport>
      <classname>ws.argo.responder.transport.MulticastTransport</classname>
      <configFilename>${installDir}/responder/config/multicastTransport.prop</configFilename>
    </transport>

    <!--  
    <transport>
      <classname>ws.argo.responder.transport.AmazonSNSTransport</classname>
      <configFilename>${installDir}/responder/config/amazonSNSTransport.prop</configFilename>
    </transport>    
    -->
    
    
    <!--
    <transport>
      <classname>ws.argo.responder.transport.MQTTResponderTransport</classname>
      <configFilename>${installDir}/responder/config/mqttTransport.prop</configFilename>
    </transport>
    -->

  </transports>

</responder>