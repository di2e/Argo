<?xml version="1.0" encoding="UTF-8"?>
<!--
  #
  # Copyright 2015 Jeff Simpson.
  #
  # Licensed under the MIT License, (the "License"); 
  # you may not use this file except in compliance with the License. 
  # You may obtain a copy of the License at 
  # 
  # http://opensource.org/licenses/MIT 
  # 
  # Unless required by applicable law or agreed to in writing, software 
  # distributed under the License is distributed on an "AS IS" BASIS, 
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
  # See the License for the specific language governing permissions and 
  # limitations under the License. 
  # 
  -->

<!-- Notes on service id and contractID:

  The id for a service is a unique identifier for this exact instance of the service. 
  You will need to generate an id for each service entry. How you generate the 
  id is up to you, but it will need to be globally unique. It is recommended that 
  you use a UUID. An example id is: "urn:uuid:3fd78dc8-c83c-4e84-8d01-95423c812ab8" 
  The contractID is the globally unique id of the service contract. This is equivalent
  to the id of the "type" of service. You should already know what this ID is and you
  should not be making it up on the fly. Argo probes look for services of a 
  "type" and will use this contractID number in the probe. The responder simply matches 
  up the probe contractID with the contractID in service entry. The details of how and 
  when contractIDs are generated should be governed by your organization and detailed 
  its Design-time Service Governance protocol. 
  
  For Plugfest '15, please refer to Plugfest governanace documentation for how to register
  a new contractID. 
  
  Notes on operational field usage: The operational fields are: ipAddress, port, url data 
  and ttl. The rest of the fields (description, contractDescription, serviceName and 
  consumability) are for descriptive purposes and are meant purely for human consumption. 
  
  ipAddress, port and url are not mandated. I'd imagine you'd use at least one or two of 
  these field to provide the configuration coordinate for the service, but the exact usage
  of the fields is defined by the service contract and not the protocol. You could forego 
  the usage of all these fields and put the configuration information in the data block if 
  you wish. 
  
  data usage: This is uninterpereted bytes that will be sent back to the respondTo address 
  of the probe. There is no limitation on what goes in this field. It could be complex 
  configuration information, a picture, some HTML for descriptive purposes. Pointers to other 
  stuff. Whatever. But I wouldn't make it too big.
  
  TTL usage: The TTL is an indicator to the requestor that they should only trust the 
  configuration information in the service record for the number of minutes specified. 
  A TTL of 0 is indefinite. Basically, a client should re-probe after the TTL has expired 
  to make sure it has the latest connection information, but it's not required. 
  
  consumability usage: This field has 2 options. HUMAN_CONSUMABLE or MACHINE_CONSUMABL
  It's just a hint to the consumer regarding what type of service you're advertising. 
  MACHINE_CONSUMABLE connotes that the configuration information in the service record 
  is for some client software to use. HUMAN_CONSUMABLE connotes that this service record 
  is meant to display in a browser for human consumption. Records of this type will likely 
  only have a url set. There is no reason why you can't advertise a web site via the protocol. 
  
  Try it, you'll like it.
  
  ** Replacement Variables **
  
  This XML file is capable of replacement variables.  The Argo configuration XML files have a special
  replacement variable resolution capability called the `resolveIP` item.  The values of
  this item will be resolved in special ways depending on the type and the value of the item.
  
  Both the listenerURL and the respondToURL can use the interpolation
  replacement variables defined in the configuration.
  
  Examples:
    internalIP will resolve to the IPV4 address assigned to the interface named eth0
    <resolveIP name="internalIP" type=ni">eth0:ipv4</resolve>
    <listenerURL>http://${resolveIP:internalIP}:12345</listenerURL>
    
    externalIP will resolve to value of the HTTP GET call to the AWS external IP service
    (Note: this will only work on configurations running in a AWS EC2 instance)
    <resolveIP name="externalDNS">http://169.254.169.254/latest/meta-data/hostname</resolveIP>
    <respondToURL>http://${resolveIP:externalDNS}:80</respondToURL>
    
  The client configuration does a sanity check on all URLs to make sure that are
  well formed (reachable is another matter ... better check your work).

  ** Other Replacement Resolvers **
  
  Other then the "resolveIP" prefix (e.g. ${resolveIP:internalIP}) there are other prefixes
  you can use to inject values from other contexts.  The following are supported:
  
  Prefix: sys - This prefix marks a variable to be a system property
  Example: ${sys:user.home}
  
  Will search for a system property with the given name and replace the variable by its value.
  This is a very easy means for accessing the values of system properties.
  
  Prefix: env  - Variables can also reference OS-specific environment properties.
  Example: ${env:JAVA_HOME}
  
  
  -->

<servicesConfiguration>
<!-- 
  <resolveIP name="internalIP" type="ni"></resolveIP>
  <resolveIP name="externalIP" type="uri"></resolveIP>
 -->
 
 <!-- AWS Example  -->
 <!-- 
  <resolveIP name="externalDNS" type="uri">http://169.254.169.254/latest/meta-data/hostname</resolveIP>
 -->
 <!-- You can use it like this:  ${resolveIP:externalDNS} to insert the public DNS name where you
  need it in the configuration  -->
 
  <service id="YOUR SERVICE ID HERE" contractID="YOUR CONTRACT ID HERE">
	
	<!-- description block -->
    <serviceName>A very short name for the Service Instance 1</serviceName>
    <description>This is an awesome service. The scope of its awesomeness is hard to describe</description>
    <contractDescription>A short description of Contract 1</contractDescription>
    <consumability>HUMAN_CONSUMABLE</consumability>
    <ttl></ttl>

    <!-- access points -->
    <accessPoints>
      <accessPoint label="internal network">
        <ipAddress></ipAddress>
        <port></port>
        <url>http://192.168.0.51:8080/MyAwesomeService/index.jsp</url>
        <data><![CDATA[This is some CDATA text]]></data>
      </accessPoint>
      <accessPoint label="external network - NAT address">
        <ipAddress></ipAddress>
        <port></port>
        <url>https://1.1.1.1:443/MyAwesomeService/index.jsp</url>
        <data><![CDATA[This is some CDATA text]]></data>
      </accessPoint>
    </accessPoints>
  </service>

  <service id="YOUR SERVICE ID HERE 2" contractID="YOUR CONTRACT ID HERE 2">

    <!-- description block -->
    <serviceName>A very short name for the Service Instance 2</serviceName>
    <description>This is another awesome service. The scope of its awesomeness is eclipsed only by the other awesome service</description>
    <contractDescription>A short description of Contract 2</contractDescription>
    <consumability>MACHINE_CONSUMABLE</consumability>
    <ttl>10</ttl>

    <!-- access points -->
    <accessPoints>
      <accessPoint label="internal network">
        <ipAddress>192.168.0.51</ipAddress>
        <port>8080</port>
        <url>http://192.168.0.51:8080/AnotherAwesomeService/operation</url>
        <data><![CDATA[This is some CDATA text]]></data>
      </accessPoint>
      <accessPoint label="external network - NAT address">
        <ipAddress></ipAddress>
        <port></port>
        <url>https://1.1.1.1:443/AnotherAwesomeService/operation</url>
        <data><![CDATA[This is some CDATA text]]></data>
      </accessPoint>

    </accessPoints>
  </service>
</servicesConfiguration>
